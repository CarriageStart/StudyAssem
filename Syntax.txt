
1. If statement
    - Use cmp and conditional jmp

ex)
.gloabl _start
.section .data
numbers:
    .quad 5, 0
.section .text
_start:
    movq $8, %rbx
    movq numbers(,%rbx, 1), %rax
# Condition
    cmp numbers(, %rbx, 0), %rax 
# Jump if not satisfied
    jbe ELSE_STATEMENT
# True Statement
    movq 1, %rdi
    movq 60, %rax
    syscall
# Jump if not satisfied
ELSE_STATEMENT:
    movq 0, %rdi
    movq 60, %rax
    syscall
    

2. Loop within condition
    - Composed of "Early Exit", "Loop Statement", "If statement".
ex)
.global _start
.section .data
len:
    .quad 7
numbers:
    .quad 5, 20, 33, 80, 52, 10, 1

.section .text
_start:
    movq len, %rcx  # %rcx for loop instruction
    movq $mynumbers, %rbx
    movq $0, %rdi

    # Ealy Exit 
    cmp $0, %rcx
    je ENDLOOP

    ### Main loop ###
LOOP:
    # Loop Statement
    movq (%rbx), %rax

    # If Statement
    cmp %rdi, %rax
    jbe CONTINUE
    movq %rax, %rdi

CONTINUE:
    addq $8, %rbx   # quad is 8 bytes.
    loopq LOOP

ENDLOOP
    movq $60, %rax
    syscall
    

3. Function (Procedures or routines)
 - A function is defined with name(label for the entry point), 
  input parameteres, return values, and side effect(non-returning result).
 - It is just a conventionally-defined jump using stack.
    (label : entry jump location, 
     input parameters : stacks and registers before entry jump,
     output parameters : stacks and registers before end jump)

    => The only difference is that the convention of assembly language compiler
      offers the useful instructions for function. (Language prividen features)

        * This is also the same for "syscall"
        => The "syscall" table is present on every memory block of Operating System.
        => It internally uses "driver" for independency from the hardwares.
            => For hardware feature, it eventually searches device table too.

  * Function calling convention(Application binary interface)
      => "Linux" uses the System V ABI convention.(Operator-specific compiler)
      => All function of any programing launguage, that shares calling convention, 
        can be used in common.

        Stack data  ( Each line is quad word )
                                        (Latter part of memory)
   Previous   ^ |                   |   (=> Stack starts from the last part of memory)
  Stack Frame | |                   |
              - |                   |
              - | Label Address     |   => Location to jump in return.                  | (Call instruction)
   Current    | | Previous %rbp     |   <= %rbp points to this location of stack.           | (Enter $36, $0 instruction)   
  Stack Frame | |   Local var 1     |   -8(%rbp)  => Local(non-global) variables            |  |
              | |   Local var 2     |   -16(%rbp)     of called function.                   |  | controllable size
              v |   Local var 3     |   -24(%rbp)                                           |  |
                |   Local var 4     |   -30(%rbp) <= %rsp points to this location.          |  | (16 byte alignment)
                                        (start part of memory)
                                        (=> Stack grows downward)
        
        * Note the procesor doesn't know the function or stack frame.(Language feature)
         Since the assmebly is unkind, we need to "access memory of the local stack frame 
         via offset from the base stack point" when we write the called function.
            ( Previous %rbp needs to be saved somewhere )
    
      => When function is called,
        a. Next instruction address of the current context is pushed. ( 8 Bytes)
        b. Current %rbp is pushed in stack. ( 8 Bytes )
        c. %rsp is saved to %rbp.(stack pointor)
        d. Allocate the local variables of function in stack.(Doing function content)
            ex) 
            .section .data
            NUMBYTES:
                .quad 24
            .section. .text
            subq $NUMBYTES, %rsp
            movq %rsi -8(%rbp)
            movq %rsi -16(%rbp)
            movq %rsi -24(%rbp)
    
      => When function is finished,
        0. Save return value in %rax.(%rdx can be used too)
        a. %rbp is saved to %rsp.   ( To return to the previous stack frame)
        b. Pop to %rbp (Restore the previous %rbp)
        c. Pop the next instruction location and jump.

    * Stack Allignment
    - In the manipulation of the stack, stack pointor always need to be multiple 
     of quad word (16byte: "Stack alligned to 16 bytes"). Modern processors 
     optimizes the function call instruction. Restoring pointors and jump need to be
     done in one clock cylte.

    => Restoring stack base and instruction pointors is memory-related, and jump is
      not related. For this, stack is alligned to 16 bytes so that it can be fetched
      in one row operation of memory.


  - Assembly provides "enter, leave, call, ret" instructions.

  - In Assembly, these instructions uses %rbp, %rbx, and %r12 ~ %r15.
    => Used to save current location, jump location, and so on.
    => The data in these register should be saved in memory.
    => %rbp is the base address of the function stack frame.
      (%rbp is like ".section .data" location) 
        => In object file, any data label is changed in the relative 
            location from ".section .data" location, which is %rbp.
    => %rsp is the stack pointor, which is commonly used in program.
  - Input parameters are saved in sequence.
    a. Registers(%rdi, %rsi, %rdx, %rcx, %r8, %r9)
    b. Stacks(the last parameter pushed first)
  - Value to return needs to be in %rax and %rdx.

        ++ Note that the function name is just a label of where the function starts!
    ex)
    # exponentfunc.s
    .globl exponent                         # Function name 
    .type exponent, @function               
    .equ LOCAL_NUM, -8                      # Local variable offset from base pointor

    .section .text
    exponent:
        # %rdi has a base
        # %rsi has a integer exponent

        #enter $16, $0                  
        enter $16, $0                   # Local Offset often denoted as constant.
        movq %rsi, -8(%rbp)             # %rbp has the previous rbp. 
        movq $1, %rax                   # Therefore, local vairable stores from -8(%rbp)

    mainloop:
        mulq %rdi
        decq -8(%rbp)
        jnz mainloop

    complete:
        leave
        ret

            ++ Note the caller side should take care of how to stack the input parameters.
                => Function side assumes the input parameters is well-organized.
    # main.s
    .globl _start
    .section .text
    _start:
        movq $3, %rdi
        movq $2, %rsi
        call exponent                   # Calling function

        movq %rax, %rdi
        movq $60, %rax
        syscall

    # ld exponent.o main.o -o main

  - Assmbly launguage in C
  ex)
    # main.c
    extern int exponent(int, int);
    int main() {
        return exponent(4, 2);
    }
    # gcc main.c exponentfunc.s -o runexponent



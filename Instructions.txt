
1. Arithmetic instructions
- Usually formatted with xxxy, where xxx is a instruction name and y is a unit in operation.
- The possible units of operation are q(quadraword: 8 Byte), d(double word: 4 Bytes), w(word: 2 Byte), b(Byte))
- All carry is stored in CF(carry flag), which is a bit flag of %eflag.

addq src, des
    : Adds the source to destination (des += src)
subq src, des
    : Substract the source from destination (des -= src)
incq des
    : Increase des by one
desq des
    : Decrease des by one
mulq src
    : Multiply %rax by src (Accumulation register)
divq src
    : Divide %rax by src (Accumulation register), modular is stored in %rdx.

cmpq src, des
    : Calcualte des-src w/o changing src and des, and discard result
    : If result is equal, ZF 1.
    : If positive, ZF 0 and "Positive Flag" (TODO)
    : If negative, ZF 0 and "negative Flag"

* Floating point operation
- Adding surfix "ss" makes it operate on single-value single precision values.
- Adding surfix "sd" makes it operate on single-value double precision values.

- Converting value format keeping the meaning.
cvtsi2sd src, des
    : Convert(cvt) scalar interger(si) to(2) scalar double
    ( src : no %xmm registers, des : no %rax registers )
cvtsi2ss src, des
    ( src : no %xmm registers, des : no %rax registers )
cvtsd2si src, des
    ( des : no %xmm registers, src : no %rax registers )
cvtss2si src, des
    ( des : no %xmm registers, src : no %rax registers )
cvtsd2ss src, des
    ( src : no %rax registers, des : no %rax registers )
cvtss2sd src, des
    ( src : no %rax registers, des : no %rax registers )

ex)
cvtsi2sd %rax, %xmm0

addss src, des
addsd src, des

subss src, des
subsd src, des

incss src
incsd src

desss src
dessd src

mulss src, des
mulsd src, des

divss src, des  # In this case, no mudular exists.
divsd src, des


* Packed Instruction
- Add the operation unit surfix("p" + "s" or "d")
    for the arithmetic instructions in integers
addps src, des      # (Add packed single)
    : Add in single precision units
addpd src, des      # (Add packed double)
    : Add in double precision units

- Add the "p" prefix and operation unit surfix("b, w, d, q...")
    for the arithmetic instructions in integers
paddb %xmm0, %xmm1
paddw %xmm0, %xmm1
paddd %xmm0, %xmm1
paddq %xmm0, %xmm1


- Move instructions
movq src, %xmm0     # Move with zero padding
movsd src, %xmm0    # Move without zero padding(Scalar double)
movss src, %xmm0    # Move without zero padding(Scalar single)

- bit shift in xmm  
(Packed shift left logical double quad-word)
pslldq $bytes, %xmm0 
(Packed shift right logical double quad-word)
psrldq $bytes, %xmm0 # Shift by bytes the logial double quad-word

- Packing
movq src, %xmm0
psldq $8, %xmm0
movsd src, %xmm0

- UnPacking
movq %xmm0, des1
psrdq $8, %xmm0
movq %xmm0, des2

- To move the whole 128 bits use
movdqu %xmm0, %xmm1 (Double Quad-word Unaligned)
movdqa %xmm0, %xmm1 (Double Quad-word Aligned)
movups %xmm0, %xmm1 (Unaligned Packed singles)
movaps %xmm0, %xmm1 (Aligned Packed singles)
    ex) 
    .globl main
    .section .data
    value:
        .single 1., 1., 1., 1.  # 128 bits
    value2:
        .double 1., 2.          # 128 bits
    .section .text
    main:
        movaps value, %xmm0
        movaps value2, %xmm1
        # movapd value2, %xmm1  # not used for speed issue.


2. Flow control
- No unit-specification is needed.

jmp dest
    : Change the instruction pointor($rip) to the destination.
jz dest
    : Jump if ZF is 1.
jnz dest
    : Jump if ZF is 0.
jc dest
    : Jump if CF is 1.
jnc dest
    : Jump if CF is 0.
je dest
    : Jump if the comparison is "equal"(ZF 1)
jne dest
    : Jump if the comparison is "not equal"(ZF 0)
ja dest
    : Jump if the comparison is "Above"(ZF 0 and PF)
jae dest
    : Jump if the comparison is "Above or eqaul"(ZF 0 or PF)
jb dest
    : Jump if the comparison is "Below"(ZF 0 and BF)
jbe dest
    : Jump if the comparison is "Below or eqaul"(ZF 0 or BF)

loop
    : Jump if %rcx != 0 (doesn't do anything if %rcx == 0)
    => Unit of command depends on what unit you use for %cx.
        (ex : loopq for %rcx, loopd for %ecx, loopw for %cx ...)


3. Stack Manipulation
- Unit-specification is needed.
- In modern computing, the operating system allocates the stack memory 
 for every program.
- The stack pointor is saved in %rsp, which is the last address of 
 the allocated program memory.
- In the manipulation of the stack, %rsp is decreased or raised.

    * Generally, the stack manipulation indicates the finish of 
     one unit process. 
        => The smallest unit of process can be ideally considered
        to be composed of
        a. Loading data from the stack(or memory) to registers.
        b. Manipulation of registers.
        c. Push the result.

push src    (src: value, register, memory)
    : push the value in the stack,
     and decrease the stack pointor(value in %rsp).
pop des     (src: register, memory)
    : pop the last value in the stack to the destination,
     and incerease the stack pointor.


4. Stack Frame Manipulation
  - In Assembly, these instructions uses %rbp, %rbx, and %r12 ~ %r15.
    => Used to save current location, jump location, and so on.
    => The data in these register should be saved in memory.

enter Value1, Value2
    : Push a new stack frame with Value1 amount of local variable space.
    ( Value2 is used for local varibles of nested function)
    => "Push a new stack frame" 
            == push %rbp, change %rsp, make local space.
leave
    : remove the stack frame
    => "Remove the current stack frame"
            == Change %rsp to %rbp, Restore the previous %rbp

5. Calling Funtion
call label
    : Save the current instruction location and jump to the label.
        ( Push the current instruction location and jump )
ret
    : Return to the pushed location.
        ( Pop the previous instruction location and jump )


